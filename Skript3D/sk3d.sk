#  ____        __                                 __              __      ____      
# /\  _`\     /\ \                __             /\ \__         /'__`\   /\  _`\    
# \ \,\L\_\   \ \ \/'\     _ __  /\_\    _____   \ \ ,_\       /\_\L\ \  \ \ \/\ \  
#  \/_\__ \    \ \ , <    /\`'__\\/\ \  /\ '__`\  \ \ \/       \/_/_\_<_  \ \ \ \ \ 
#    /\ \L\ \   \ \ \\`\  \ \ \/  \ \ \ \ \ \L\ \  \ \ \_        /\ \L\ \  \ \ \_\ \
#    \ `\____\   \ \_\ \_\ \ \_\   \ \_\ \ \ ,__/   \ \__\       \ \____/   \ \____/
#     \/_____/    \/_/\/_/  \/_/    \/_/  \ \ \/     \/__/        \/___/     \/___/ 
#                                          \ \_\                                          
#                                           \/_/                                          
#
# Credit goes to Vrganj and Skillsbo
#
# Don't touch anything below, you'll probably break it.
#

init:
    set {cam::*} to (0, 0, 0)
    broadcast "&3SK3D &eSkript3D has been loaded!"

map:
    set {canvas} to event-map
    manage map {canvas}

function clearCanvas(canv: map, clr: number = 34):
    loop 128 times:
        loop 128 times:
            set map pixle at (loop-value-1) - 1, (loop-value-2) - 1 on map {_canv} to {_clr}

function drawPixel(canv: map, x: number, y: number, clr: number = 119):
    set map pixle at {_x}, {_y} on map {_canv} to {_clr}

function drawLine(canv: map, p1: numbers, p2: numbers, clr: number = 119):
    set {_dx} to {_p2::1} - {_p1::1}
    set {_dy} to {_p2::2} - {_p1::2}
    {_p1::1} != {_p2::1}:
        loop integers from {_p1::1} to {_p2::1}:
            set {_} to {_y} if {_y} is set else {_p1::2}
            set {_y} to round({_p1::2} + {_dy} * (loop-value - {_p1::1}) / {_dx})
            loop numbers from {_} to {_y}:
                drawPixel({_canv}, round(loop-value-1), round(loop-value-2), {_clr})
            drawPixel({_canv}, round(loop-value), {_y}, {_clr})
    else:
        loop numbers from {_p1::2} to {_p2::2}:
            drawPixel({_canv}, {_p1::1}, round(loop-value), {_clr})

function drawRect(canv: map, p1: numbers, p2: numbers, clr: number = 119, fill: number = 0):
    send action bar "%{_canv}%" to players
    drawPoly({_canv}, ({_p1::1}, {_p1::2}, {_p2::1}, {_p1::2}, {_p2::1}, {_p2::2}, {_p1::1}, {_p2::2}, {_p1::1}, {_p1::2}), {_clr}, true)
    {_fill} > 3:
        loop integers from {_p1::1} + 1 to {_p2::1} - 1:
            loop integers from {_p1::2} + 1 to {_p2::2} - 1:
                drawPixel({_canv}, loop-value-1, loop-value-2, {_fill})

function drawEllipse(canv: map, x: number, y: number, hr: number, vr: number, clr: number = 119, fill: number = 0):
    loop 360 times:
        drawPixel({_canv}, round({_x} + ({_hr} * cos((loop-value)))), round({_y} + ({_vr} * sin((loop-value)))), {_clr})
    {_fill} > 3:
        set {_hr2} to 0
        set {_vr2} to 0
        while 1 = 1:
            loop 360 times:
                drawPixel({_canv}, round({_x} + ({_hr2} * cos((loop-value)))), round({_y} + ({_vr2} * sin((loop-value)))), {_fill})
            {_hr2} < {_hr}:
                set {_hr2} to {_hr2} + 1
            {_vr2} < {_vr}:
                set {_vr2} to {_vr2} + 1
            {_hr2} = {_hr}
            {_vr2} = {_vr}
            stop loop

function drawPoly(canv: map, points: numbers, clr: num = 119, s: boolean = false):
    loop {_points::*}:
        set {_n} to loop-index parsed as int
        mod({_n}, 2) = 0:
            add loop-value to {_y::*}
            {_n} > 2
            set {_dx} to {_n} - 3
            set {_dy} to {_n} - 2
            set {_x} to {_n} - 1
            set {_y} to {_n} - 0
            drawLine({_canv}, ({_points::%{_x}%}, {_points::%{_y}%}), ({_points::%{_dx}%}, {_points::%{_dy}%}), {_clr})
        else:
            add loop-value to {_x::*}
    {_s} = false
    set {_max::x} and {_max::y} to 0
    loop {_x::*}:
        set {_max::x} to loop-value if loop-value > {_max::x}
    set {_min::x} to {_max::x}
    loop {_x::*}:
        set {_min::x} to loop-value if loop-value < {_min::x}
    loop {_y::*}:
        set {_max::y} to loop-value if loop-value > {_max::y}
    set {_min::y} to {_max::y}
    loop {_y::*}:
        set {_min::y} to loop-value if loop-value < {_min::y}
    #drawRect({_canv}, ({_max::x}, {_max::y}), ({_min::x}, {_min::y}), 50)

function drawObj(canv: map, obj: numbers, p: numbers, clr: num = 119):
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 1
            set {_y} to {_s} - 2
            set {_z} to {_s}
            set {_x} to {_obj::%{_x}%}
            set {_y} to {_obj::%{_y}%}
            set {_z} to {_obj::%{_z}%}
            set {_x} to round(({_x} + 64 + {cam::2}) * ({fl} / ({fl} + {_z} + ({cam::3} * -1))))
            set {_y} to round(({_y} + 64 + ({cam::1} * -1)) * ({fl} / ({fl} + {_z} + ({cam::3} * -1))))
            add {_x} to {_l::*}
            add {_y} to {_l::*}
    loop {_p::*}:
        set {_n} to "%loop-value%" parsed as int
        set {_x} to {_n} * 2
        set {_y} to {_x} - 1
        set {_x} to {_l::%{_x}%}
        set {_y} to {_l::%{_y}%}
        drawPixel({_canv}, {_x}, {_y}, {_clr})
        add {_x} to {_pos::*}
        add {_y} to {_pos::*}
    drawPoly({_canv}, {_pos::*}, {_clr})

function translateObj(obj: numbers, pos: numbers) :: objects:
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 2
            set {_y} to {_s} - 1
            set {_z} to {_s}
            add {_obj::%{_x}%} + {_pos::1} to {_fin::*}
            add {_obj::%{_y}%} + {_pos::2} to {_fin::*}
            add {_obj::%{_z}%} + {_pos::3} to {_fin::*}
    return {_fin::*}

function scaleObj(obj: numbers, scl: number) :: objects:
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 2
            set {_y} to {_s} - 1
            set {_z} to {_s}
            add {_obj::%{_x}%} * {_scl} to {_fin::*}
            add {_obj::%{_y}%} * {_scl} to {_fin::*}
            add {_obj::%{_z}%} * {_scl} to {_fin::*}
    return {_fin::*}

function rotObjX(obj: numbers, ang: number) :: objects:
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 2
            set {_y} to {_s} - 1
            set {_z} to {_s}
            add {_obj::%{_x}%} to {_fin::*}
            add {_obj::%{_y}%} * cos({_ang}) - {_obj::%{_z}%} * sin({_ang}) to {_fin::*}
            add {_obj::%{_z}%} * cos({_ang}) + {_obj::%{_y}%} * sin({_ang}) to {_fin::*}
    return {_fin::*}

function rotObjY(obj: numbers, ang: number) :: objects:
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 2
            set {_y} to {_s} - 1
            set {_z} to {_s}
            add {_obj::%{_x}%} * cos({_ang}) - {_obj::%{_z}%} * sin({_ang}) to {_fin::*}
            add {_obj::%{_y}%} to {_fin::*}
            add {_obj::%{_z}%} * cos({_ang}) + {_obj::%{_x}%} * sin({_ang}) to {_fin::*}
    return {_fin::*}

function rotObjZ(obj: numbers, ang: number) :: objects:
    loop {_obj::*}:
        set {_s} to loop-index parsed as int
        mod({_s}, 3) = 0:
            set {_x} to {_s} - 2
            set {_y} to {_s} - 1
            set {_z} to {_s}
            add {_obj::%{_x}%} * cos({_ang}) - {_obj::%{_y}%} * sin({_ang}) to {_fin::*}
            add {_obj::%{_y}%} * cos({_ang}) + {_obj::%{_x}%} * sin({_ang}) to {_fin::*}
            add {_obj::%{_z}%} to {_fin::*}
    return {_fin::*}
